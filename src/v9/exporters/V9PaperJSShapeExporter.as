package v9.exporters{	import flash.display.JointStyle;	import flash.display.CapsStyle;	import flash.display.LineScaleMode;	import com.codeazur.utils.StringUtils;	import com.codeazur.as3swf.SWF;	import com.codeazur.as3swf.exporters.core.DefaultShapeExporter;	import com.codeazur.as3swf.utils.ColorUtils;	import com.codeazur.as3swf.utils.NumberUtils;		public class V9PaperJSShapeExporter extends DefaultShapeExporter	{		protected var _paper:String;				protected var index:uint;		protected var instructions:Array;		protected var pathVars:Array;		protected var tmpStyles:Array;		protected var tmpPathVar:String;		protected var tmpShapeName:String;				public function V9PaperJSShapeExporter(swf:SWF, name:String) {			super(swf);			tmpShapeName = name;		}				public function get paper():String { return StringUtils.trim(_paper); }				override public function beginShape():void {			index = 0;			instructions = [				"function " + tmpShapeName + "() {"			];			pathVars = [];		}		override public function beginFills():void {			tmpPathVar = "p" + index;			tmpStyles = [];			instructions.push("\t" + "var " + tmpPathVar + " = new CompoundPath();");			pathVars.push(tmpPathVar);			index++;		}				override public function beginLines():void {			tmpPathVar = "p" + index;			tmpStyles = [];			instructions.push("\t" + "var " + tmpPathVar + " = new CompoundPath();");			pathVars.push(tmpPathVar);			index++;		}				override public function beginFill(color:uint, alpha:Number = 1.0):void {			tmpStyles.push("\t" + tmpPathVar + ".fillColor = new RGBColor(" + ColorUtils.r(color) + "," + ColorUtils.g(color) + "," + ColorUtils.b(color) + ");");			if(alpha != 1) {				tmpStyles.push("\t" + tmpPathVar + ".opacity = " + alpha + ";");			}		}				override public function lineStyle(thickness:Number = NaN, color:uint = 0, alpha:Number = 1.0, pixelHinting:Boolean = false, scaleMode:String = LineScaleMode.NORMAL, startCaps:String = null, endCaps:String = null, joints:String = null, miterLimit:Number = 3):void {			tmpStyles.push("\t" + tmpPathVar + ".strokeColor = new RGBColor(" + ColorUtils.r(color) + "," + ColorUtils.g(color) + "," + ColorUtils.b(color) + ");");			tmpStyles.push("\t" + tmpPathVar + ".strokeWidth = " + thickness + ";");			var cap:String = "round";			switch(startCaps) {				case CapsStyle.NONE: cap = "butt"; break;				case CapsStyle.SQUARE: cap = "square"; break;			}			tmpStyles.push("\t" + tmpPathVar + ".strokeCap = \"" + cap + "\";");			var join:String = "round";			var miter:Number = 0;			switch(joints) {				case JointStyle.BEVEL: join = "bevel"; break;				case JointStyle.ROUND: join = "round"; break;				default:					join = "miter";					if(miterLimit >= 1 && miterLimit != 4) {						miter = miterLimit;					}					break;			}			tmpStyles.push("\t" + tmpPathVar + ".strokeJoin = \"" + join + "\";");			if(miter >= 1) {				tmpStyles.push("\t" + tmpPathVar + ".miterLimit = " + miter + ";");			}			if(alpha != 1) {				tmpStyles.push("\t" + tmpPathVar + ".opacity = " + alpha + ";");			}		}				override public function moveTo(x:Number, y:Number):void {			instructions.push("\t" + tmpPathVar + '.moveTo(new Point(' + NumberUtils.roundPixels20(x) + ', ' + NumberUtils.roundPixels20(y) + '));');		}				override public function lineTo(x:Number, y:Number):void {			instructions.push("\t" + tmpPathVar + '.lineTo(new Point(' + NumberUtils.roundPixels20(x) + ', ' + NumberUtils.roundPixels20(y) + '));');		}				override public function curveTo(controlX:Number, controlY:Number, anchorX:Number, anchorY:Number):void {			instructions.push("\t" + tmpPathVar + '.quadraticCurveTo(new Point(' + NumberUtils.roundPixels20(controlX) + ', ' + NumberUtils.roundPixels20(controlY) + '), new Point(' + NumberUtils.roundPixels20(anchorX) + ', ' + NumberUtils.roundPixels20(anchorY) + '));');		}		override public function endFill():void {		}				override public function endFills():void {			instructions = instructions.concat(tmpStyles);			instructions.push("\t" + tmpPathVar + ".closed = true;");		}				override public function endLines():void {			instructions = instructions.concat(tmpStyles);			instructions.push("\t" + tmpPathVar + ".closed = true;");		}				override public function endShape():void {			instructions.push("\treturn new Group([" + pathVars.join(",") + "]);");			instructions.push("}");			_paper = instructions.join("\r");		}	}}